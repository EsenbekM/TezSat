"""
Django settings for tezsat project.

Generated by 'django-admin startproject' using Django 3.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import logging.config
import os
from datetime import timedelta

import firebase_admin
from decouple import config
from dj_database_url import parse as db_url
from django.utils.translation import gettext_lazy as _
from elasticsearch import Elasticsearch
from elasticsearch_dsl import connections
from dotenv import load_dotenv

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/
load_dotenv()
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', cast=bool, default=False)

CORS_ALLOW_ALL_ORIGINS = True
CORS_ORIGIN_ALLOW_ALL = True
ALLOWED_HOSTS = ['*']
# CORS_ORIGIN_WHITELIST = config('CORS_ORIGIN_WHITELIST', cast=lambda x: [y.strip() for y in x.split(',')], default='')

# Application definition


INSTALLED_APPS = [
    'jet',
    'tezsat.admin.DefaultAdminConfig',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    # 'rest_framework_simplejwt.token_blacklist',
    'phonenumber_field',
    'django_q',
    'rest_framework',
    'storages',
    'drf_yasg2',
    'adminsortable2',
    'rangefilter',
    'django_elasticsearch_dsl',

    'users',
    "ads",
    'location',
    'category',
    'product',
    'chat',
    'notification',
    'business',
    'info',
    'media_syncer',
    'payment',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'users.middleware.set_last_active_middleware',
]

ROOT_URLCONF = 'tezsat.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'tezsat.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases
DATABASES = {
    'default': config(
        'DATABASE_URL',
        cast=db_url
    )
}

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    # {
    #     'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    # },
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Bishkek'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

AUTH_USER_MODEL = 'users.User'

FIREBASE_SERVICE_ACCOUNT_KEY = config('FIREBASE_SERVICE_ACCOUNT_KEY')
firebase_credentials = firebase_admin.credentials.Certificate(FIREBASE_SERVICE_ACCOUNT_KEY)
firebase = firebase_admin.initialize_app(firebase_credentials)

REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',),
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
        # 'authn.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'users.authentication.JWTSessionAuthentication',
        # 'rest_framework.authentication.SessionAuthentication',
        # 'drf_firebase_auth.authentication.FirebaseAuthentication',
    ],
    'EXCEPTION_HANDLER': 'tezsat.views.exception_handler',
    'NON_FIELD_ERRORS_KEY': 'non_field_errors',
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 20,
    'DATETIME_FORMAT': '%s',
}

AUTHENTICATION_BACKENDS = (
    "users.backends.ModelBackend",
)

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=30),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,

    'AUTH_HEADER_TYPES': ('Bearer', 'JWT',),

}
X_FRAME_OPTIONS = 'SAMEORIGIN'

PRODUCT_UPVOTE_LIMIT = timedelta(hours=2)

PHONENUMBER_DB_FORMAT = 'INTERNATIONAL'

# Logging Configuration

# Clear prev config
LOGGING_CONFIG = None

# Get loglevel from env
LOGGING_LEVEL = config('LOGGING_LEVEL', default='INFO')

logging.config.dictConfig({
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'console': {
            'format': '%(asctime)s %(levelname)s [%(name)s:%(lineno)s] %(module)s %(process)d %(thread)d %(message)s',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'console',
        },
    },
    'loggers': {
        '': {
            'level': LOGGING_LEVEL,
            'handlers': ['console', ],
        },
    },
})

REDIS_URL = config('REDIS_URL')
Q_CLUSTER = {
    'name': 'tezsat',
    'label': 'Django Q',
    'redis': REDIS_URL
}

# Sentry
SENTRY_DSN = config('SENTRY_DSN', default=None)
if SENTRY_DSN is not None:
    import sentry_sdk
    from sentry_sdk.integrations.django import DjangoIntegration

    sentry_sdk.init(
        dsn=SENTRY_DSN,
        integrations=[DjangoIntegration()],

        # If you wish to associate users to errors (assuming you are using
        # django.contrib.auth) you may enable sending PII data.
        send_default_pii=True
    )


class Lang:
    RU = 'ru'
    KY = 'ky'

    @classmethod
    def choices(cls):
        return (
            (cls.RU, _(cls.RU)),
            (cls.KY, _(cls.KY))
        )


USE_S3 = config('USE_S3', cast=bool, default=False)

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

if USE_S3:
    AWS_ACCESS_KEY_ID = config('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = config('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = 'media'
    AWS_S3_ENDPOINT_URL = config('AWS_S3_ENDPOINT_URL')
    AWS_S3_OBJECT_PARAMETERS = {
        'CacheControl': 'max-age=86400',
        'ACL': 'public-read'
    }
    AWS_QUERYSTRING_AUTH = False
    AWS_S3_CUSTOM_DOMAIN = f'{config("AWS_S3_CUSTOM_DOMAIN")}/{AWS_STORAGE_BUCKET_NAME}'
    AWS_S3_REGION_NAME = config('AWS_S3_REGION_NAME')

    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

    MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/'
else:
    MEDIA_URL = '/media/'

STATIC_URL = '/static/'
STATIC_ROOT = 'static/'
MEDIA_ROOT = 'media/'

WATERMARK_IMAGE = config('WATERMARK_IMAGE', default=os.path.join(BASE_DIR, 'watermark.png'))
WATERMARK_PROPORTION_PERCENT = 30
WATERMARK_PADDING_PERCENT = 5

SMALL_THUMBNAIL_SIZE = 512, 512
MEDIUM_THUMBNAIL_SIZE = 1024, 1024

# JET PART
JET_SIDE_MENU_COMPACT = True
JET_INDEX_DASHBOARD = 'tezsat.dashboard.CustomIndexDashboard'

SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header'
        }
    }
}


if DEBUG and config('ENVIRONMENT') == 'LOCAL':
    INSTALLED_APPS += ["debug_toolbar"]
    # include as early as possible
    MIDDLEWARE = ["debug_toolbar.middleware.DebugToolbarMiddleware"] + MIDDLEWARE
    DEBUG_TOOLBAR_CONFIG = {"SHOW_TOOLBAR_CALLBACK": lambda request: True}


ELASTICSEARCH_DSL = {
    'default': {
        'hosts': 'es02'
    },
}
